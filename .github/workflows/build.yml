name: CI Python

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
      

env:
  ## Sets environment variable
  BUILD_NUMBER: ${{ github.run_number	}}

jobs:
  build:

    runs-on: [ self-hosted, Windows ]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      #- uses: jfrog/setup-jfrog-cli@v3.4.1
      #  env:
      #    JF_ENV_1: ${{ secrets.JF_SECRET_ENV_1 }}
      #- run: |
      #    echo Download
      #jf rt dl Download binar
  
      - name: Build
        run: |
          gradle build 
          
      - name: Upload 
        uses: actions/upload-artifact@v3.1.3
        with: 
          name: JAR
          path: STP2API/dist/*.whl

      - name: Pytest
        run: |
          gradle test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4.0.3
        if: always() # always run even if the previous step fails
        with:
          require_tests: true
          fail_on_failure: true
          report_paths: 'STP2API/test_report.xml'
  #NEXT Job
  extra:
    
    if: ((github.ref == 'refs/heads/master') || (github.event_name == 'release'))
    needs: build
    
    runs-on: [ self-hosted, Windows ]

    steps:
      # Runs docs
      - name: Generate any docs
        run: |
          echo doc
      - name: Checkout wiki code
        uses: actions/checkout@v2
        with:
          repository: ${{github.repository}}.wiki
          path: wiki

      - name: Make pdf
        run: |
          cd wiki
          python conf.py
          copy YavaConf_23_manual.pdf ..
          cd ..
          7z a Manual.zip YavaConf_23_manual.pdf
          
      - name: Upload Manual
        uses: actions/upload-artifact@v3.1.3
        with:
          name: Manual
          path: YavaConf_23_manual.pdf
          
      #- name: Upload to BART
      #  uses: jfrog/setup-jfrog-cli@v3.4.1
      #  env:
      #    JF_ENV_1: ${{ secrets.JF_SECRET_ENV_1 }}
      #- run: |
      #    echo upload
      #jf rt del Delete old binary
      #jf rt u upload new binary
          
  #NEXT Job
  release:
    if: github.event_name == 'release'
    needs: extra
    
    runs-on: [ self-hosted, Windows ]
    environment: Release Python API
    steps:
      - name: Upload Release
        run: |
          echo release 
    #  - name: Upload to BART Ofical
    #    uses: jfrog/setup-jfrog-cli@v3.4.1
    #    env:
    #      JF_ENV_1: ${{ secrets.BART_JF_SECRET_ENV_1 }}
    #  - run: |
    #      echo "---------------------------------------" > ChangeLog.txt
    #      echo "    YavaConf 2023 ChangeLog" >> ChangeLog.txt
    #      echo "---------------------------------------" >> ChangeLog.txt
    #      echo "    Tag Name: ${{ github.event.release.tag_name }}" >> ChangeLog.txt
    #      echo "    Release Name: ${{ github.event.release.name }}" >> ChangeLog.txt
    #      echo "${{ github.event.release.body }}" >> ChangeLog.txt
    #  #jf rt u copy build to offical

